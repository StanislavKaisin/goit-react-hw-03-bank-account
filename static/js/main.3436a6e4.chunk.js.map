{"version":3,"sources":["Components/bank-account/Balance/Balance.module.css","Components/bank-account/Dashboard/Dashboard.module.css","Components/bank-account/Controls/Controls.module.css","Components/bank-account/Controls/Controls.jsx","Services/formatter.js","Components/bank-account/Balance/Balance.jsx","Components/bank-account/TransactionHistory/TransactionHistory.jsx","Services/localStorage.jsx","Components/bank-account/Dashboard/Dashboard.jsx","Components/App/App.jsx","index.js"],"names":["module","exports","balance","dashboard","controls","input","button","buttonDisabled","Controls","_ref","onDeposit","onWithdraw","onInputChange","inputValue","isWithdrawEnable","react_default","a","createElement","className","styles","type","onChange","value","placeholder","min","step","required","onClick","disabled","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","PropTypes","number","isRequired","Balance","deposit","witdraw","format","TransactionHistory","transactionHistory","length","map","operation","key","id","amount","date","defaultProps","localStorageAvailable","arguments","undefined","storage","window","x","setItem","removeItem","e","write","objToLS","localStorage","JSON","stringify","error","console","log","propTypes","object","Dashboard","state","history","totalDeposit","totalWithdraw","createNewOperation","typeOfOperation","dateOfOperation","Date","toLocaleString","uuidv4","_this","handleDeposit","toast","autoClose","clearInput","setState","prevState","concat","Object","toConsumableArray","Math","round","handleWithdraw","_this$state","abs","handleInputChange","target","Number","isNaN","roundedValue","transformedValue","stateFromLS","obFromLS","parse","getItem","this","objectSpread","_this$state2","bank_account_Controls_Controls","bank_account_Balance_Balance","bank_account_TransactionHistory_TransactionHistory","react_toastify","Component","App","Dashboard_Dashboard","ReactDOM","render","Components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.3436a6e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__33Vu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__2brfL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3UObf\",\"input\":\"Controls_input__1N2uP\",\"button\":\"Controls_button__1mUxi\",\"buttonDisabled\":\"Controls_buttonDisabled__3Wqqr\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nconst Controls = ({\n  onDeposit,\n  onWithdraw,\n  onInputChange,\n  inputValue,\n  isWithdrawEnable,\n}) => {\n  return (\n    <section className={styles.controls}>\n      <input\n        type=\"number\"\n        onChange={onInputChange}\n        value={inputValue}\n        className={styles.input}\n        placeholder=\"Введите сумму\"\n        min=\"0\"\n        step=\"0.01\"\n        required\n      />\n      <div className=\"\">\n        <button onClick={onDeposit} type=\"button\" className={styles.button}>\n          Deposit\n        </button>\n        <button\n          onClick={onWithdraw}\n          type=\"button\"\n          disabled={!isWithdrawEnable}\n          className={isWithdrawEnable ? styles.button : styles.buttonDisabled}\n        >\n          Withdraw\n        </button>\n      </div>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  onDeposit: PropTypes.func.isRequired,\n  onWithdraw: PropTypes.func.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n  inputValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  isWithdrawEnable: PropTypes.bool.isRequired,\n};\n\nexport default Controls;\n","import PropTypes from 'prop-types';\n\nconst formatter = new Intl.NumberFormat('ua', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n});\n\nformatter.PropTypes = {\n  number: PropTypes.number.isRequired,\n};\n\nexport default formatter;\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Balance.module.css';\n\nimport formatter from '../../../Services/formatter';\n\nconst Balance = ({ balance, deposit, witdraw }) => {\n  return (\n    <section className={styles.balance}>\n      <span>⬆️</span>\n      <span>{formatter.format(deposit)}</span>\n      <span>⬇️</span>\n      <span>{formatter.format(witdraw)}</span>\n      <span>Balance: {formatter.format(balance)}</span>\n    </section>\n  );\n};\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  deposit: PropTypes.number.isRequired,\n  witdraw: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TransactionHistory.css';\n\nimport formatter from '../../../Services/formatter';\n\nconst TransactionHistory = ({ transactionHistory }) => {\n  return transactionHistory.length > 0 ? (\n    <table className=\"transaction-history\">\n      <thead>\n        <tr>\n          <th>Transaction</th>\n\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactionHistory.map(operation => (\n          <tr key={operation.id}>\n            <td>{operation.type}</td>\n            <td>{formatter.format(operation.amount)}</td>\n            <td>{operation.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ) : null;\n};\n\nTransactionHistory.propTypes = {\n  transactionHistory: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    }),\n  ),\n};\nTransactionHistory.defaultProps = {\n  transactionHistory: [],\n};\n\nexport default TransactionHistory;\n","/* eslint-disable react/forbid-prop-types */\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable consistent-return */\n// check if local storage exists\nimport PropTypes from 'prop-types';\n\nfunction localStorageAvailable(type = 'localStorage') {\n  try {\n    const storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n// write to local storage\n\nexport const write = objToLS => {\n  if (localStorageAvailable()) {\n    try {\n      localStorage.setItem('bank-account', JSON.stringify(objToLS));\n    } catch (error) {\n      console.log('Error during writing from local storage');\n      return null;\n    }\n  }\n};\n\n// read from local storage\n\nexport const read = () => {\n  if (localStorageAvailable()) {\n    try {\n      const obFromLS = JSON.parse(localStorage.getItem('bank-account'));\n\n      if (obFromLS !== null) {\n        return obFromLS;\n      }\n\n      return null;\n    } catch (error) {\n      console.log('Local Storage is empty');\n    }\n  }\n};\nwrite.propTypes = {\n  objToLS: PropTypes.object.isRequired,\n};\n","/* eslint-disable consistent-return */\nimport React, { Component } from 'react';\nimport uuidv4 from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport styles from './Dashboard.module.css';\n\nimport * as localStorage from '../../../Services/localStorage';\n\nexport default class Dashboard extends Component {\n  state = {\n    history: [],\n    totalDeposit: 0,\n    totalWithdraw: 0,\n    balance: 0,\n    inputValue: '',\n    isWithdrawEnable: true,\n  };\n\n  componentDidMount() {\n    const stateFromLS = localStorage.read();\n    if (stateFromLS !== null) {\n      return this.setState({ ...stateFromLS });\n    }\n  }\n\n  createNewOperation = typeOfOperation => {\n    const dateOfOperation = new Date().toLocaleString();\n    return {\n      id: uuidv4(),\n      type: typeOfOperation,\n      amount: this.state.inputValue,\n      date: dateOfOperation,\n    };\n  };\n\n  handleDeposit = () => {\n    const { inputValue } = this.state;\n    if (!inputValue) {\n      toast('Введите сумму для проведения операции!', { autoClose: false });\n      this.clearInput();\n      return;\n    }\n\n    const operation = this.createNewOperation('Deposit');\n\n    this.setState(\n      prevState => {\n        return {\n          history: [operation, ...prevState.history],\n          totalDeposit:\n            Math.round((prevState.totalDeposit + inputValue) * 100) / 100,\n          balance: Math.round((prevState.balance + inputValue) * 100) / 100,\n        };\n      },\n      () => {\n        localStorage.write(this.state);\n      },\n    );\n\n    this.clearInput();\n  };\n\n  handleWithdraw = () => {\n    const { inputValue, balance } = this.state;\n\n    if (!inputValue) {\n      toast('Введите сумму для проведения операции!', { autoClose: false });\n      this.clearInput();\n      return;\n    }\n\n    if (Math.abs(inputValue) > balance) {\n      toast('На счету недостаточно средств для проведения операции!', {\n        autoClose: false,\n      });\n      this.clearInput();\n      return;\n    }\n\n    const operation = this.createNewOperation('Withdraw');\n\n    this.setState(\n      prevState => {\n        return {\n          history: [operation, ...prevState.history],\n          totalWithdraw:\n            Math.round((prevState.totalDeposit + inputValue) * 100) / 100,\n          balance: Math.round((prevState.balance - inputValue) * 100) / 100,\n        };\n      },\n      () => {\n        localStorage.write(this.state);\n      },\n    );\n    this.clearInput();\n  };\n\n  handleInputChange = e => {\n    const { value } = e.target;\n\n    if (value === '' || Number.isNaN(value)) {\n      this.setState({\n        inputValue: '',\n      });\n    }\n    const { balance } = this.state;\n    const roundedValue = Math.round(value * 100) / 100;\n    const transformedValue = Math.abs(roundedValue);\n    this.setState({\n      inputValue:\n        Number(transformedValue) === 0 ? '' : Number(transformedValue),\n      isWithdrawEnable: !(transformedValue > balance),\n    });\n  };\n\n  clearInput = () => {\n    this.setState({\n      inputValue: '',\n      isWithdrawEnable: true,\n    });\n  };\n\n  render() {\n    const {\n      inputValue,\n      totalDeposit,\n      totalWithdraw,\n      balance,\n      isWithdrawEnable,\n      history,\n    } = this.state;\n\n    return (\n      <div className={styles.dashboard}>\n        <Controls\n          onDeposit={this.handleDeposit}\n          onWithdraw={this.handleWithdraw}\n          onInputChange={this.handleInputChange}\n          inputValue={inputValue}\n          isWithdrawEnable={isWithdrawEnable}\n        />\n        <Balance\n          balance={balance}\n          deposit={totalDeposit}\n          witdraw={totalWithdraw}\n        />\n        <TransactionHistory transactionHistory={history} />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Dashboard from '../bank-account/Dashboard/Dashboard';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}